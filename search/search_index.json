{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"KnowledgeBase-Tech","text":""},{"location":"#description","title":"Description","text":"<p>This repository, <code>KnowledgeBase-Tech</code>, is a comprehensive collection of technical guides, tips, and resources, covering a wide range of technologies, programming languages, frameworks, and tools. Whether you're a seasoned developer or a beginner just getting started, you'll find valuable information to assist you on your tech journey.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Guides and Tutorials: Step-by-step instructional guides and tutorials on various topics, designed to help users learn new skills or improve existing ones.</li> <li>Best Practices: Resources on industry-standard best practices for development, testing, deployment, and more.</li> <li>Code Snippets: Ready-to-use code snippets for different languages and frameworks to help you get started quickly.</li> <li>Resources: Links to valuable external resources, such as official documentation, external blogs, and more.</li> </ul>"},{"location":"#structure","title":"Structure","text":"<p>The repository is divided into various directories, each focusing on a specific technology, tool, or topic. Within each directory, you'll find relevant files containing guides, resources, and snippets.</p>"},{"location":"#how-to-use","title":"How to Use","text":"<p>To use this repository:</p> <ol> <li>Clone the repository: Clone this repository to your local machine using <code>git clone https://github.com/muritalatolanrewaju/knowledgebase-tech.git</code>.</li> <li>Navigate to a directory: Navigate to the directory relevant to the technology or topic you are interested in.</li> <li>Explore the files: Open and read the files to access the information they contain.</li> </ol>"},{"location":"#contribution","title":"Contribution","text":"<p>Contributions to <code>KnowledgeBase-Tech</code> are always welcome. Whether you want to add a guide, improve an existing resource, or add a new technology directory, your contributions are appreciated.</p> <p>Please follow the standard GitHub flow:</p> <ol> <li>Fork the repository: Create your own copy of this repository by clicking on the Fork button.</li> <li>Clone the repository: Clone the forked repository to your local machine.</li> <li>Create a branch: Create a new branch to work on. Branches should have descriptive names, like \"add-angular-guide\" or \"fix-python-snippet\".</li> <li>Make your changes: Add, modify, or delete files to implement your changes.</li> <li>Commit your changes: Use clear and concise commit messages to describe what changes you've made.</li> <li>Push changes to GitHub: Push your changes to the forked repository on GitHub.</li> <li>Create a pull request: Submit a pull request from your forked repository to the original <code>KnowledgeBase-Tech</code> repository. </li> </ol> <p>Please ensure that your pull request includes a detailed description of the changes you've made. </p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under GNU General Public License v3.0. For more details, see the LICENSE file in the repository.</p> <p>Enjoy exploring <code>KnowledgeBase-Tech</code> and feel free to reach out with any questions, suggestions, or feedback. Happy coding!</p>"},{"location":"Ansible-AWX/install-AWX/","title":"Ansible AWX Installation","text":"<p>An Ansible AWX operator for Kubernetes built with Operator SDK and Ansible. </p>"},{"location":"Ansible-AWX/install-AWX/#resources","title":"Resources","text":"<ul> <li>k3s docs</li> <li> <p>Ansible AWX-Operator Github</p> </li> <li> <p>Ansible AWX Operator readthedocs.io</p> </li> <li> <p>Kustomize</p> </li> </ul>"},{"location":"Ansible-AWX/install-AWX/#additional-setup-requirements","title":"Additional setup requirements","text":"<ul> <li>Red Hat Enterprise Linux / CentOS / Fedora</li> </ul> <p>It is recommended to turn off firewalls:</p> <pre><code>systemctl disable firewalld --now\n</code></pre> <p>If you wish to keep firewalld enabled, by default, the following rules are required:</p> <pre><code>firewall-cmd --permanent --add-port=6443/tcp #apiserver\nfirewall-cmd --permanent --zone=trusted --add-source=10.42.0.0/16 #pods\nfirewall-cmd --permanent --zone=trusted --add-source=10.43.0.0/16 #services\nfirewall-cmd --reload\n</code></pre> <p>Additional ports may need to be opened depending on your setup.</p> <ul> <li>Ubuntu / Debian</li> </ul> <p>It is recommended to turn off ufw (uncomplicated firewall):</p> <pre><code>ufw disable\n</code></pre> <p>If you wish to keep ufw enabled, by default, the following rules are required:</p> <pre><code>ufw allow 6443/tcp #apiserver\nufw allow from 10.42.0.0/16 to any #pods\nufw allow from 10.43.0.0/16 to any #services\n</code></pre> <p>Additional ports may need to be opened depending on your setup.</p>"},{"location":"Ansible-AWX/install-AWX/#install-k3s","title":"Install K3s","text":"<ul> <li>Update the system</li> </ul> <p>On Ubuntu:</p> <pre><code>sudo apt update -y &amp;&amp; sudo apt upgrade -y\n</code></pre> <p>On Redhat:</p> <pre><code>sudo dnf update\n</code></pre> <ul> <li>Install Script</li> </ul> <pre><code>sudo curl -sfL https://get.k3s.io | sh -\n</code></pre> <ul> <li>Add to a new environment variable to path:</li> </ul> <pre><code>echo 'export PATH=\"/usr/local/bin:$PATH\"' &gt;&gt; ~/.bashrc\n</code></pre> <ul> <li>Reload the Profile: </li> </ul> <pre><code>source ~/.bashrc\n</code></pre> <ul> <li>Verify kube config file permission:</li> </ul> <pre><code>ls -la /etc/rancher/k3s/k3s.yaml\n</code></pre> <p>Here is the output: <code>-rw------- 1 root root 2969 Nov 23 22:04 /etc/rancher/k3s/k3s.yaml</code></p> <ul> <li>Modify kube config file owner:</li> </ul> <pre><code>sudo chown &lt;user&gt;:&lt;user&gt; /etc/rancher/k3s/k3s.yaml\n</code></pre> <ul> <li>Check installed k3s version</li> </ul> <pre><code>kubectl version\n</code></pre> <ul> <li>Check environment status</li> </ul> <pre><code>kubectl get nodes\n</code></pre> <ul> <li>Check workload</li> </ul> <pre><code>kubectl get pods\n</code></pre>"},{"location":"Ansible-AWX/install-AWX/#install-kustomize","title":"Install Kustomize","text":"<ul> <li>Install Kustomize by downloading precompiled binaries</li> </ul> <pre><code>curl -s \"https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh\"  | bash\n</code></pre> <ul> <li>Move <code>Kustomize</code> to binary path</li> </ul> <pre><code>sudo mv kustomize /usr/local/bin\n</code></pre> <ul> <li>Verify <code>kustomize</code> command:</li> </ul> <pre><code>which kustomize\n</code></pre>"},{"location":"Ansible-AWX/install-AWX/#install-awx-operator","title":"Install AWX operator","text":"<ul> <li>Make a new dir</li> </ul> <pre><code>mkdir awx &amp;&amp; cd awx\n</code></pre> <ul> <li>Create <code>kustomize</code> config file:</li> </ul> <pre><code>touch kustomization.yaml\n</code></pre> <ul> <li>Add <code>kustomize</code> config:</li> </ul> <pre><code>vi kustomization.yaml\n</code></pre> <p>Find the latest tag here</p> <pre><code>---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - github.com/ansible/awx-operator/config/default?ref=2.8.0\n\n# Set the image tags to match the git version from the above\nimages:\n  - name: quay.io/ansible/awx-operator\n    newTag: 2.8.0\n\n# Specify a custom namespace in which to install AWX\nnamespace: awx\n</code></pre> <pre><code>kustomize build . | kubectl apply -f -\n</code></pre> <ul> <li>Check pods in <code>awx</code> namespace</li> </ul> <pre><code>kubectl get pods -n awx\n\nWait a bit, and you should have the awx-operator running:\n\n# NAME                                               READY   STATUS    # RESTARTS   AGE\n# awx-operator-controller-manager-6678865c69-5lpqd   2/2     Running   0          112s\n</code></pre> <ul> <li>Set current namespace to awx:</li> </ul> <pre><code>sudo /usr/local/bin/kubectl config set-context --current --namespace=awx\n</code></pre> <ul> <li>Create <code>awx.yaml</code> to pass commands to <code>kustomize</code>:</li> </ul> <pre><code>touch awx.yaml\n</code></pre> <ul> <li>Create <code>AWX</code> config file:</li> </ul> <pre><code>vi awx.yaml\n</code></pre> <pre><code>---\napiVersion: awx.ansible.com/v1beta1\nkind: AWX\nmetadata:\n  name: awx\nspec:\n  service_type: nodeport\n  nodeport_port: 30080\n</code></pre> <ul> <li>Add <code>AWX</code> resources to kustomization config file:</li> </ul> <pre><code>vi kustomization.yaml\n</code></pre> <pre><code>---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - github.com/ansible/awx-operator/config/default?ref=2.8.0\n  - awx.yaml\n\n# Set the image tags to match the git version from the above\nimages:\n  - name: quay.io/ansible/awx-operator\n    newTag: 2.8.0\n\n# Specify a custom namespace in which to install AWX\nnamespace: awx\n</code></pre> <ul> <li>Rerun the build command:</li> </ul> <pre><code>kustomize build . | kubectl apply -f -\n</code></pre> <ul> <li>Check deployment logs:</li> </ul> <pre><code>kubectl logs -f deployments/awx-operator-controller-manager -c awx-manager\n</code></pre> <ul> <li>Wait for the deploy to complete without errors, then retrieve the admin user, <code>admin</code> and password <code>&lt;resourcename&gt;-admin-password</code>:</li> </ul> <pre><code>kubectl get secret awx-admin-password -o jsonpath=\"{.data.password}\" | base64 --decode ; echo\n</code></pre> <ul> <li>Navigate to the AWX UI</li> </ul> <p><code>http://&lt;ip address&gt;:30080/</code></p> <ul> <li>Check the port AWX is running on:</li> </ul> <pre><code>kubectl get svc\n</code></pre> <ul> <li>Delete all pods in a  namespace:</li> </ul> <pre><code>kubectl delete pods --all --namespace awx\n</code></pre> <ul> <li>Watch redeployed pods:</li> </ul> <pre><code>kubectl get pods --namespace awx --watch\n</code></pre>"},{"location":"Ansible-Semaphore/Ansible-Semaphore-Installation-on-RHEL-Based-OS/","title":"Ansible Semaphore Installation on RHEL-Based OS","text":"<p>Semaphore is an open-source, web-based solution that simplifies the use of Ansible for IT teams. This guide demonstrates its installation on AlmaLinux 8.</p>"},{"location":"Ansible-Semaphore/Ansible-Semaphore-Installation-on-RHEL-Based-OS/#prerequisites","title":"Prerequisites","text":"<p>Ensure the following are installed:</p> <ul> <li>MySQL &gt;= 5.6.4/MariaDB &gt;= 5.3</li> <li>ansible</li> <li>git &gt;= 2.x</li> </ul> <p>Update the OS before starting:</p> <pre><code>sudo yum -y update\n</code></pre> <p>A reboot is also essential once the upgrade is made:</p> <pre><code>sudo reboot -f\n</code></pre>"},{"location":"Ansible-Semaphore/Ansible-Semaphore-Installation-on-RHEL-Based-OS/#1-install-mariadb-database-server","title":"1. Install MariaDB Database Server","text":"<p>Semaphore requires a database server. Install MariaDB on AlmaLinux 8:</p> <pre><code>curl -LsS -O https://downloads.mariadb.com/MariaDB/mariadb_repo_setup\nsudo bash mariadb_repo_setup\nsudo yum install MariaDB-server MariaDB-client MariaDB-backup\n</code></pre> <p>Start and enable mariadb database service:</p> <pre><code>sudo systemctl enable --now mariadb\n</code></pre> <p>Secure database server after installation and Answer the questions that follow:</p> <pre><code>sudo mariadb-secure-installation\n\n# Switch to unix_socket authentication [Y/n] n\n# Change the root password? [Y/n] y\n# Remove anonymous users? [Y/n] y\n# Disallow root login remotely? [Y/n] y\n# Remove test database and access to it? [Y/n] y\n# Reload privilege tables now? [Y/n] y\n</code></pre>"},{"location":"Ansible-Semaphore/Ansible-Semaphore-Installation-on-RHEL-Based-OS/#2-install-git-2x","title":"2: Install <code>git 2.x</code>","text":"<p>Semaphore requires git version 2.x to be installed.Install git 2.x on your AlmaLinux 8 server:</p> <p><pre><code>sudo yum install git\n</code></pre> Confirm the installation by checking the version of git installed:</p> <pre><code>git --version\n</code></pre>"},{"location":"Ansible-Semaphore/Ansible-Semaphore-Installation-on-RHEL-Based-OS/#3-install-ansible","title":"3. Install Ansible","text":"<pre><code>sudo yum -y install epel-release\nsudo yum -y install ansible\n</code></pre> <p>Check the version of Ansible installed:</p> <pre><code> ansible --version\n</code></pre>"},{"location":"Ansible-Semaphore/Ansible-Semaphore-Installation-on-RHEL-Based-OS/#4-install-semaphore-ansible-web-ui","title":"4. Install Semaphore Ansible Web UI","text":"<p>Semaphore is available on Semaphore's GitHub repository. Clone the repository:</p> <pre><code>sudo yum -y install wget curl\nVER=$(curl -s https://api.github.com/repos/ansible-semaphore/semaphore/releases/latest|grep tag_name | cut -d '\"' -f 4|sed 's/v//g')\nwget https://github.com/ansible-semaphore/semaphore/releases/download/v${VER}/semaphore_${VER}_linux_amd64.rpm\n</code></pre> <p>Install the <code>.rpm</code> package:</p> <pre><code>sudo rpm -Uvh semaphore_${VER}_linux_amd64.rpm\n</code></pre> <p>Check semaphore binary path:</p> <pre><code>which semaphore\n</code></pre>"},{"location":"Ansible-Semaphore/Ansible-Semaphore-Installation-on-RHEL-Based-OS/#5-configure-semaphore-ansible-web-ui","title":"5. Configure Semaphore Ansible Web UI","text":"<pre><code>sudo semaphore setup\n</code></pre> <p>Answer the prompts that appear, and set other configuration values in <code>/config.json</code> file:</p> <pre><code>Hello! You will now be guided through a setup to:\n\n1. Set up configuration for a MySQL/MariaDB database\n2. Set up a path for your playbooks (auto-created)\n3. Run database Migrations\n4. Set up initial semaphore user &amp; password\n\nWhat database to use:\n   1 - MySQL\n   2 - BoltDB\n   3 - PostgreSQL\n (default 1): 1\n   DB Hostname (default 127.0.0.1:3306): &lt;ENTER&gt;\n   DB User (default root): root\n   DB Password: &lt;db_root_Password&gt;  \n   DB Name (default semaphore): semaphore\n   Playbook path (default /tmp/semaphore): /opt/semaphore\n   Web root URL (optional, see https://github.com/ansible-semaphore/semaphore/wiki/Web-root-URL):  http://localhost:8010/\n   Enable email alerts? (yes/no) (default no): n\n   Enable telegram alerts? (yes/no) (default no): n\n   Enable slack alerts? (yes/no) (default no): n\n   Enable LDAP authentication? (yes/no) (default no): n\n   Config output directory (default /home/username): &lt;ENTER&gt;\n</code></pre> <p>Set username:</p> <pre><code>Username: admin\nEmail: admin@example.com\nWARN[0268] sql: no rows in result set                    level=Warn\n Your name: Admin User\n Password: StrongUserPassword \n You are all setup Admin User!\n Re-launch this program pointing to the configuration file\n ./semaphore -config /config.json\n</code></pre> <p>You can set other configuration values on the file <code>/config.json</code>.</p>"},{"location":"Ansible-Semaphore/Ansible-Semaphore-Installation-on-RHEL-Based-OS/#6-configure-systemd-unit-for-semaphore","title":"6. Configure <code>systemd</code> unit for Semaphore","text":"<p>Semaphore Ansible UI can be managed by <code>systemd</code>. Setup the configurations directory and service unit file:</p> <pre><code>sudo mkdir /etc/semaphore\n</code></pre> <p>Create systemd service unit file:</p> <pre><code>sudo vi /etc/systemd/system/semaphore.service\n</code></pre> <p>Add the following content:</p> <pre><code>[Unit]\nDescription=Semaphore Ansible UI\nDocumentation=https://github.com/ansible-semaphore/semaphore\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=simple\nExecReload=/bin/kill -HUP $MAINPID\nExecStart=/usr/bin/semaphore server --config /etc/semaphore/config.json\nSyslogIdentifier=semaphore\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Copy your configuration file to created directory, <code>/etc/semaphore</code>:</p> <pre><code>sudo ln -s /home/`whoami`/config.json /etc/semaphore/config.json\n</code></pre> <p>Stop running instances of Semaphore:</p> <pre><code>sudo pkill semaphore\n</code></pre> <p>Confirm:</p> <pre><code>ps aux | grep semaphore\n</code></pre> <p>Reload <code>systemd</code> and start semaphore service:</p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl restart semaphore\n</code></pre> <p>Check status:</p> <pre><code>sudo systemctl status semaphore\n</code></pre> <p>Troubleshoot errors: <pre><code>sudo journalctl -u semaphore\n</code></pre></p> <p>Set Service to start at boot:</p> <pre><code>sudo systemctl enable semaphore\n</code></pre> <p>Port 3000 should now be Open:</p> <pre><code>sudo ss -tunelp | grep 3000\n</code></pre>"},{"location":"Ansible-Semaphore/Ansible-Semaphore-Installation-on-RHEL-Based-OS/#7-setup-nginx-proxy-optional","title":"7. Setup Nginx Proxy (Optional)","text":"<p>To remotely access Semaphore, configure Nginx as a reverse proxy: </p> <ul> <li>Nginx Proxy Configuration for Ansible Semaphore</li> </ul>"},{"location":"Ansible-Semaphore/Ansible-Semaphore-Installation-on-RHEL-Based-OS/#8-access-semaphore-ansible-web-ui","title":"8. Access Semaphore Ansible Web UI","text":"<p>Access Semaphore at http://<code>&lt;your-server-ip&gt;</code>:3000/ on your web browser.</p>"},{"location":"Ansible-Semaphore/Deploying-Playbooks-Using-Semaphore-Ansible-GUI/","title":"Deploying Playbooks Using Semaphore Ansible GUI","text":"<p>Semaphore Ansible GUI is a self-hosted web interface for managing Ansible playbooks, inventories, and scheduling jobs. Written in Go and Vue.js, it can be installed either locally or on a server.</p>"},{"location":"Ansible-Semaphore/Deploying-Playbooks-Using-Semaphore-Ansible-GUI/#1-prepare-the-ansible-environment","title":"1: Prepare the Ansible Environment","text":"<p>Create a new directory for Ansible:</p> <pre><code>mkdir -p ansible/roles &amp;&amp; cd ansible/roles\n</code></pre> <p>Initialize a new Ansible role to create an administrator user:</p> <pre><code>ansible-galaxy init create_admin_user\n</code></pre> <p>Create a role in the roles directory:</p> <pre><code>vi /home/`whoami`/ansible/roles/create_admin_user/tasks/main.yml\n</code></pre> <ul> <li>Add the following content to the file, then save and exit:</li> </ul> <pre><code>- name: Add the user with a specific uid and a primary group of \"admin\"\n# User module creates a new user or updates an existing user\n  ansible.builtin.user:\n    name: \"{{ item.name }}\"\n    comment: \"{{ item.comment }}\"\n    uid: \"{{ item.uid }}\"\n  loop: \"{{ admin }}\"\n\n# Authorized_key module manages SSH authorized keys\n- name: Setup authorized key\n  ansible.posix.authorized_key:\n    user: \"{{ item.name }}\"\n    key: \"{{ lookup('file', 'pub_keys/{{ item.name }}.pub') }}\"\n  loop: \"{{ admin }}\"\n\n# Add the user to the sudoers file\n- name: Update sudoers file and validate\n  ansible.builtin.lineinfile:\n    dest: /etc/sudoers\n    insertafter: EOF\n    line: \"{{ item.name }} ALL=(ALL) NOPASSWD: ALL\"\n    regexp: \"^{{ item.name }} .*\"\n    state: present\n  loop: \"{{ admin }}\"\n</code></pre> <p>Create a list of users to be added to the system:</p> <pre><code>vi /home/`whoami`/ansible/roles/create_admin_user/vars/main.yml\n</code></pre> <ul> <li>Add the following content for a user <code>whoami</code>, save and exit:</li> </ul> <p><pre><code>admin:\n  - name: '`whoami`'\n    comment: 'Ultimate User'\n    uid: '1000'\n</code></pre> Switch to the Semaphore user (e.g., <code>user</code>):</p> <p><pre><code>sudo su - `whoami`\n</code></pre> Generate a SSH key pair:</p> <pre><code>ssh-keygen -t rsa -b 4096\n</code></pre> <p>Create a new directory for the public keys:</p> <pre><code>mkdir -p /home/`whoami`/ansible/roles/create_admin_user/files/pub_keys/\n</code></pre> <ul> <li>Copy the public key to the <code>files/pub_keys</code> directory:</li> </ul> <pre><code>sudo cp /home/`whoami`/.ssh/id_rsa.pub /home/`whoami`/ansible/roles/create_admin_user/files/pub_keys/`whoami`.pub\n</code></pre>"},{"location":"Ansible-Semaphore/Deploying-Playbooks-Using-Semaphore-Ansible-GUI/#2-set-up-playbooks-and-inventory","title":"2: Set Up Playbooks and Inventory","text":"<p>Create a directory for the playbooks:</p> <pre><code>mkdir -p /home/`whoami`/ansible/playbooks/users\n</code></pre> <p>Create a new playbook to run the role:</p> <pre><code>vi /home/`whoami`/ansible/playbooks/users/create_admin_user.yml\n</code></pre> <pre><code>---\n- hosts: all\n  gather_facts: yes\n  become: yes\n  become_user: root\n  tasks:\n    - ansible.builtin.import_role:\n        name: create_admin_user\n</code></pre> <p>Create Ansible configuration file:</p> <pre><code>vi /home/`whoami`/ansible/ansible.cfg\n</code></pre> <ul> <li>Add the following content, save and exit:</li> </ul> <p><pre><code>[defaults]\nroles_path=roles\nhost_key_checking=False\nprivate_key_file=~/.ssh/id_rsa\n</code></pre> Install <code>sshpass</code>:</p> <pre><code>sudo yum -y install sshpass\n</code></pre> <p>Create an inventory directory:</p> <pre><code>mkdir -p /home/`whoami`/ansible/inventory/test\n</code></pre> <p>Create a new inventory file:</p> <pre><code>vi /home/`whoami`/ansible/inventory/test/hosts\n</code></pre> <ul> <li>Add the following content, save and exit:</li> </ul> <pre><code>[webservers]\n192.168.98.111\n192.168.98.112\n\n[loadbalancers]\n192.168.98.221\n\n[database]\n192.168.98.231\n</code></pre> <p>Run the playbook:</p> <pre><code>ansible-playbook -i inventory/test/hosts playbooks/users/create_admin_user.yml -bkK\n</code></pre>"},{"location":"Ansible-Semaphore/Deploying-Playbooks-Using-Semaphore-Ansible-GUI/#3-gitgithub-setup","title":"3: Git/GitHub Setup","text":"<p>Add the ssh public keys of all the hosts to GitHub as they will pull the playbooks from GitHub:</p> <p>Set the default branch name to <code>main</code>:</p> <pre><code>git config --global init.defaultBranch main\n</code></pre> <p>Set the username and email address:</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"Your Email\"\n</code></pre> <p>Set the SSH key:</p> <pre><code>git init\ngit config --local core.sshCommand \"/usr/bin/ssh -i ~/.ssh/`whoami`\"\n</code></pre> <p>Add the files to the staging area:</p> <pre><code>git add .\n</code></pre> <p>Commit the changes:</p> <pre><code>git commit -m \"Initial commit\"\n</code></pre> <p>Add the remote repository and push the changes:</p> <pre><code>git remote add origin git@github.com:muritalatolanrewaju/ansible.git\ngit branch -M main\ngit push -u origin main\n</code></pre> <p>Ensure the ssh key is accessible for future tasks.</p>"},{"location":"Ansible-Semaphore/Nginx-Proxy-Configuration-for-Ansible-Semaphore/","title":"Nginx Proxy Configuration for Ansible Semaphore","text":""},{"location":"Ansible-Semaphore/Nginx-Proxy-Configuration-for-Ansible-Semaphore/#1-ansible-semaphore-installation","title":"1: Ansible Semaphore Installation","text":"<p>Follow the guide for Ansible Semaphore Installation on RHEL-Based OS</p>"},{"location":"Ansible-Semaphore/Nginx-Proxy-Configuration-for-Ansible-Semaphore/#2-nginx-installation","title":"2: Nginx Installation","text":"<p>Install Nginx on your Semaphore server or another instance to act as a proxy server. On RHEL based OS:</p> <p><pre><code>sudo yum -y install epel-release\nsudo yum -y install vim nginx\n</code></pre> - Once the service is installed, start it and set to be started at system boot.</p> <p><pre><code>sudo systemctl start nginx\nsudo systemctl enable nginx\n</code></pre> - Verify that Nginx is running:</p> <pre><code>sudo systemctl status nginx\n</code></pre>"},{"location":"Ansible-Semaphore/Nginx-Proxy-Configuration-for-Ansible-Semaphore/#3-self-signed-ssl-certificate-generation","title":"3: Self-Signed SSL Certificate Generation","text":"<p>For testing, create a self-signed SSL certificate:</p> <ul> <li>Create a new directory for SSL certificate:</li> </ul> <pre><code>sudo mkdir /etc/nginx/ssl\n</code></pre> <ul> <li>Change to the directory:</li> </ul> <p><pre><code>cd /etc/nginx/ssl\n</code></pre> - Create a new file to define the SSL certificate configuration:</p> <pre><code>sudo vi ssl-info.txt\n</code></pre> <ul> <li>Add the following configuration to the ssl-info.txt file:</li> </ul> <pre><code>[req]\ndefault_bits       = 2048\nprompt      = no\ndefault_keyfile    = localhost.key\ndistinguished_name = dn\nreq_extensions     = req_ext\nx509_extensions    = v3_ca\n\n[ dn ]\nC = US\nST = NY\nL = New York\nO = localhost\nOU = Development\nCN = localhost\n\n[req_ext]\nsubjectAltName = @alt_names\n\n[v3_ca]\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1   = localhost\nDNS.2   = 127.0.0.1\n</code></pre> <ul> <li>Generate the SSL certificate:</li> </ul> <pre><code>sudo openssl req -x509 -nodes -days 3652 -newkey rsa:2048 -keyout localhost.key -out localhost.crt -config ssl-info.txt\n</code></pre>"},{"location":"Ansible-Semaphore/Nginx-Proxy-Configuration-for-Ansible-Semaphore/#4-nginx-proxy-configuration-for-semaphore","title":"4: Nginx Proxy Configuration for Semaphore","text":"<p>Create a new Nginx configuration file for Semaphore:</p> <pre><code>sudo vi /etc/nginx/conf.d/semaphore.conf\n</code></pre> <ul> <li>Add the following configuration to the file:</li> </ul> <pre><code>upstream semaphore {\n    server 127.0.0.1:3000;\n    }\n\nserver {\n  listen 443 ssl http2;\n  server_name  _;\n\n  # add Strict-Transport-Security to prevent man in the middle attacks\n  add_header Strict-Transport-Security \"max-age=31536000\" always;\n\n  # SSL\n  ssl_certificate /etc/nginx/ssl/localhost.crt;\n  ssl_certificate_key /etc/nginx/ssl/localhost.key;\n\n  # Recommendations from\n  # https://raymii.org/s/tutorials/Strong...\n  ssl_protocols TLSv1.1 TLSv1.2;\n  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n  ssl_prefer_server_ciphers on;\n  ssl_session_cache shared:SSL:10m;\n\n  # required to avoid HTTP 411: see Issue # 1486\n  # (https://github.com/docker/docker/issu...)\n  chunked_transfer_encoding on;\n\n  location / {\n    proxy_pass http://127.0.0.1:3000/;\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n    proxy_set_header X-Forwarded-Proto $scheme;\n\n    proxy_buffering off;\n    proxy_request_buffering off;\n  }\n\n  location /api/ws {\n    proxy_pass http://127.0.0.1:3000/api/ws;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header Origin \"\";\n  }\n}\n</code></pre> <p>Remove the default Nginx configuration file:</p> <pre><code>sudo rm /etc/nginx/conf.d/default.conf\n</code></pre> <p>Validate file syntax after the change:</p> <pre><code>sudo nginx -t\n</code></pre> <p>Activate firewalld:</p> <pre><code>sudo systemctl enable firewalld\nsudo systemctl start firewalld\n</code></pre> <p>Open port 443 on firewalld and reload the firewall configuration:</p> <pre><code>sudo firewall-cmd --permanent --add-port=443/tcp\nsudo systemctl restart firewalld\n</code></pre> <p>Modify SELinux policy to allow Apache HTTP server to make network connections:</p> <pre><code>sudo setsebool -P httpd_can_network_connect 1\n</code></pre> <p>Restart Nginx:</p> <pre><code>sudo systemctl restart nginx\n</code></pre> <p>Access Semaphore console via Nginx proxy server at <code>https://your-server-ip&gt;/</code>.</p>"},{"location":"Git/Configure-Git/","title":"Git Guide","text":"<p>This guide provides a comprenhensive overview of Git and how to use it.</p>"},{"location":"Git/Configure-Git/#install-git","title":"Install Git","text":"<ul> <li> <p>Check if Git is already installed on your system:</p> <pre><code>git --version\n</code></pre> </li> </ul> <p>If you haven't already, install Git on your system. You can find instructions for your operating system here.</p>"},{"location":"Git/Configure-Git/#configure-git","title":"Configure Git","text":"<p>For initial configuration, you need to set:</p> <ul> <li>Your name</li> <li>Your email address</li> <li>Your preferred editor</li> <li>Line endings</li> <li>Credential helper</li> </ul> <p>These configurations can be set at multiple levels:</p> <ul> <li>System level: All users</li> <li>Global level: All repositories for the current user</li> <li>Local level: The current repository</li> </ul> <p>Follow these steps to manually configure Git:</p> <ol> <li> <p>Set your username</p> <pre><code>git config --global user.name \"&lt;Your Name&gt;\"\n</code></pre> <p>Replace <code>\"Your Name\"</code> with your actual name.</p> </li> <li> <p>Set your email</p> <pre><code>git config --global user.email \"&lt;Your Email&gt;\"\n</code></pre> <p>Replace <code>\"Your Email\"</code> with your actual email.</p> </li> <li> <p>Select default editor</p> <ul> <li>For VS Code:</li> </ul> <pre><code>git config --global core.editor \"code --wait\"\n</code></pre> <ul> <li>For Nano:</li> </ul> <pre><code>git config --global core.editor \"nano -w\"\n</code></pre> <ul> <li>For Vim:</li> </ul> <pre><code>git config --global core.editor \"vim -w\"\n</code></pre> </li> <li> <p>Configure line endings</p> <ul> <li>On Windows workstations:</li> </ul> <pre><code>git config --global core.autocrlf true\n</code></pre> <ul> <li>On Linux/macOS workstations:</li> </ul> <pre><code>git config --global core.autocrlf input\n</code></pre> </li> <li> <p>Set the credential helper</p> <pre><code>git config --global credential.helper store\n</code></pre> </li> </ol>"},{"location":"Git/Configure-Git/#get-help","title":"Get Help","text":"<ul> <li> <p>Get help for Git</p> <pre><code>git --help\n</code></pre> </li> <li> <p>Get help for a specific Git command</p> <pre><code>git --help &lt;command&gt;\n</code></pre> <p>Replace <code>&lt;command&gt;</code> with the Git command you need help with.</p> </li> <li> <p>Get help for a specific Git subcommand</p> <pre><code>git &lt;command&gt; --help\n</code></pre> </li> </ul>"},{"location":"Git/Configure-Git/#cheat-sheet","title":"Cheat Sheet","text":"<p>Download the Git Cheat Sheet for a quick reference to the most commonly used Git commands.</p>"},{"location":"Git/Configure-Git/#create-snapshots","title":"Create Snapshots","text":"<ul> <li> <p>Create a new directory</p> <pre><code>mkdir &lt;directory-name&gt; &amp;&amp; cd &lt;directory-name&gt;\n</code></pre> <p>Replace <code>&lt;directory-name&gt;</code> with the name of the directory you want to create.</p> </li> <li> <p>Initialize a Git repository</p> <pre><code>git init\n</code></pre> <p>This command creates a new subdirectory named <code>.git</code> that contains all of your necessary repository files.</p> </li> </ul>"},{"location":"Git/Configure-Git/#add-files-to-the-staging-area","title":"Add Files to the Staging Area","text":"<ul> <li> <p>Add files to the staging area</p> <pre><code>git add &lt;file-name&gt;\n</code></pre> </li> <li> <p>Add all files to the staging area</p> <pre><code>git add .\n</code></pre> </li> </ul>"},{"location":"Git/Configure-Git/#commit-changes","title":"Commit Changes","text":"<ul> <li> <p>Commit changes</p> <pre><code>git commit -m \"&lt;commit-message&gt;\"\n</code></pre> </li> <li> <p>Commit changes with a message</p> <pre><code>git commit\n</code></pre> <p>This command will open your default editor for you to enter a commit message.</p> </li> <li> <p>Commit changes with a message and skip the staging area</p> <pre><code>git commit -a -m \"&lt;commit-message&gt;\"\n</code></pre> </li> <li> <p>Commit changes with a message and skip the staging area</p> <pre><code>git commit -a\n</code></pre> <p>This command will open your default editor for you to enter a commit message.</p> </li> </ul>"},{"location":"Git/Configure-Git/#remove-files-from-the-staging-area","title":"Remove Files from the Staging Area","text":"<ul> <li> <p>View the status of the working directory and staging area</p> <pre><code>git status\n</code></pre> </li> <li> <p>View the status of the working directory and staging area in short format</p> <pre><code>git status -s\n</code></pre> </li> <li> <p>View files in the staging area</p> <pre><code>git ls-files\n</code></pre> </li> <li> <p>Remove files from the staging area</p> <pre><code>git reset &lt;file-name&gt;\n</code></pre> </li> <li> <p>Remove all files from the staging area</p> <pre><code>git reset\n</code></pre> </li> </ul>"},{"location":"Git/Configure-Git/#automated-configuration-using-git-configsh","title":"Automated Configuration Using <code>git-config.sh</code>","text":"<p>You can also use the git-config.sh script to automatically configure Git. This script will prompt you for your name, email, preferred editor, and detect your operating system, and then set your Git configuration accordingly.</p> <p>You can run the script with the following command:</p> <pre><code>bash git-config.sh\n</code></pre>"},{"location":"Git/Configure-Git/#review-and-edit-configuration","title":"Review and Edit Configuration","text":"<ul> <li> <p>View all configurations</p> <pre><code>git config --list\n</code></pre> </li> <li> <p>Manually edit the Git configuration</p> <pre><code>git config --global --edit\n</code></pre> </li> </ul>"},{"location":"Git/Troubleshoot-Git/","title":"Troubleshoot Git","text":""},{"location":"Git/Troubleshoot-Git/#change-last-commit","title":"Change Last Commit","text":"<pre><code>git commit --amend\n</code></pre>"},{"location":"Git/Troubleshoot-Git/#push-amended-commit-to-remote","title":"Push Amended Commit to Remote","text":"<pre><code>git push --force-with-lease origin EXAMPLE-BRANCH\n</code></pre>"},{"location":"Git/Troubleshoot-Git/#reset-last-commit","title":"Reset last commit","text":"<pre><code>git reset --soft HEAD~1\n</code></pre>"},{"location":"Git/Troubleshoot-Git/#unstage-files","title":"Unstage files","text":"<pre><code>git reset HEAD &lt;file&gt;\n</code></pre>"},{"location":"Git/Troubleshoot-Git/#stash-local-changes","title":"Stash local changes","text":"<p>Stash Your Changes: This will temporarily save your local changes and revert your working directory to the state of the last commit.</p> <pre><code>git stash\n</code></pre> <p>Pull the Latest Changes: This will fetch the latest changes from the remote repository and merge them into your current branch.</p> <pre><code>git pull\n</code></pre> <p>Apply Your Stashed Changes: This will reapply your local changes on top of the latest changes from the remote repository.</p> <pre><code>git stash pop\n</code></pre> <p>After these steps, you'll have the latest changes from the remote repository merged into your branch, and your local changes will still be present and unstaged.</p> <p>Note: If there are conflicts between your local changes and the changes from the remote repository, you'll need to resolve them manually after running git stash pop.</p>"},{"location":"VirtualBox/VirtualBox-GuestAdditions-RHEL9-CentOS9s/","title":"VirtualBox-GuestAdditions-RHEL9-CentOS9s","text":"<p>Activate VirtualBox Copy/Paste on RHEL9/CentOS9s</p>"},{"location":"VirtualBox/VirtualBox-GuestAdditions-RHEL9-CentOS9s/#1-mount-the-guest-additions-iso","title":"1: Mount the Guest Additions ISO","text":"<ul> <li> <p>Select Devices &gt; Insert Guest Additions CD image on the VirtualBox menu bar.</p> </li> <li> <p>For GUI: Virtual CD will show up in the file explorer. Open and select <code>Run Software</code>.</p> </li> <li> <p>For CLI: Switch to <code>VBoxGuestAdditions</code> directory.</p> </li> </ul> <pre><code>cd /run/media/`whoami`/VB*\n</code></pre> <ul> <li>Run <code>VBoxGuestAdditions</code></li> </ul> <pre><code>sudo ./VBoxLinuxAdditions.run\n</code></pre>"},{"location":"VirtualBox/VirtualBox-GuestAdditions-RHEL9-CentOS9s/#2-epel-installation","title":"2: EPEL Installation","text":""},{"location":"VirtualBox/VirtualBox-GuestAdditions-RHEL9-CentOS9s/#enable-codeready-linux-builder-repository","title":"Enable CodeReady Linux Builder Repository","text":"<p>Enable the accessible CodeReady Linux Builder repository.</p> <ul> <li>On CentOS Stream 9:</li> </ul> <pre><code>sudo dnf config-manager --set-enabled crb\n</code></pre> <ul> <li>On RHEL9:</li> </ul> <pre><code>sudo subscription-manager repos --enable codeready-builder-for-rhel-9-$(arch)-rpms\n</code></pre>"},{"location":"VirtualBox/VirtualBox-GuestAdditions-RHEL9-CentOS9s/#epel-repo-installation","title":"EPEL Repo Installation","text":"<p>Install the EPEL RPM next.</p> <ul> <li>On CentOS Stream9:</li> </ul> <pre><code>sudo dnf install epel-release epel-next-release\n</code></pre> <ul> <li>On RHEL9:</li> </ul> <pre><code>sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm\n</code></pre>"},{"location":"VirtualBox/VirtualBox-GuestAdditions-RHEL9-CentOS9s/#3-install-guestaddition-tools-dependencies","title":"3: Install GuestAddition Tools Dependencies","text":"<pre><code>sudo dnf -y install gcc automake perl elfutils-libelf-devel dkms kernel-devel kernel-headers bzip2 libxcrypt-compat\n</code></pre> <ul> <li>Restart the VM</li> </ul> <pre><code>sudo reboot\n</code></pre> <ul> <li>Verify Virtualbox guest additions are correctly installed and operational</li> </ul> <pre><code>lsmod | grep vbox\n</code></pre>"}]}